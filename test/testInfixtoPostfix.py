#Infix To Postfix 
inPut ="" #รับค่าไม่เกิด 4 นิพจน์ เเละ โอเปอร์เตอร์ซ้อนกันไม่เกิน 
# 6 ชั้น เช่น !(p&q)|r>S%(s|r)

#
# เนื่องจาก ตัวโอเปอร์เรชั่น เเละ หรือ ถ้าเเล้ว ก็ต่อเมื่อ ไม่มีลำกับความสำคัญ 
#ถ้าผู้ใช้ไม่กำหนด วงเล็บให้ ดีๆ 
# โปรเเกรมจะทำการคำนวณจากซ้ายไปขวาตาม
# ดักเรื่อง จำนวน การซ้อนของโอเปอร์เรเตอร์ จำนวนตัวเเปร
# ดักหรื่องวงเล็บเปิดปิดของผู้ใช้ ถ้าใช้วงเล็บเปิดเเล้วจำเป็นต้องใส่วงเป็บปิด
# INfix = !(p&q)|r>S%(s|r)
# กำหนดให้ เครื่องหมาย  !  คือ  นิเสธ
# กำหนดให้ เครื่องหมาย  &  คือ  เเละ
# กำหนดให้ เครื่องหมาย  |  คือ  หรือ
# กำหนดให้ เครื่องหมาย  >  คือ  ถ้า..เเล้ว
# กำหนดให้ เครื่องหมาย  % คือ  ก็ต่อเมื่อ
#Postfixmujคาดหวัง  = pq&!r|s>
def INfixToPostfix (strINfix = ""):
    strInfix = "(!(p&q)|r>s%(s|r)%p>!r)"
    postFix = ""
    stack = []
    operator ={"(":4,"!":2, "&":2,"|":2,">":2,"%":2,")":0} # ค่าความสำคํัญของโอเปอร์เรเตอร์
    operatorinStack = {"(":0,"!":2, "&":2,"|":2,">":2,"%":2,")":0}# ระวัง NOT  ระวัง วงเล็บ  
    for i in strInfix :
        if i in operator.keys() :
            if len(stack) == 0 :# ไม่มี โอเปอร์เรเตอร์ใน stack
                stack.append(i)
            else : # มี โอเปอร์เรเตอร์ 
                if i != ")": # ตัวปัจจุบันไม่ใช้วงเล็กปิด
                    if operatorinStack[stack[-1]] >= operator[i]: #ตัวบนสุดของสเเต็ก มีความสำคัญมากกว่าตัวปัจจุบัน
                        popval = stack[-1] #pop ตัวสุดท้ายออกมา
                        postFix +=popval #เอามาต่อ 
                        del stack[-1] #ลบตัวสุดท้ายออก
                        stack.append(i) #เพิ่มโอเปอร์เรเตอร์ตัวปัจจบันลงเสต็ก
                    else:#ตัวปัจจุบันมีค่ามากกว่า
                        stack.append(i)
                else: # ตัวปัจจุบันเป็นวงเล็บปิด
                     while stack[-1] != "(" : # ลูปในสเเต็ก
                        popval = stack[-1] #pop ตัวสุดท้ายออกมา
                        postFix +=popval #เอามาต่อ 
                        del stack[-1] #ลบตัวสุดท้ายออก
                     del stack[-1] # ลบ ( ออก
        else:    
            postFix += i 
    else:
        while len(stack) != 0 : # ถ้าสเเต็กไม่ว่างจะป็อปข้อมูลออกมาทีละตัวจนหมด
             popval = stack[-1] #pop ตัวสุดท้ายออกมา
             postFix +=popval #เอามาต่อ 
             del stack[-1] #ลบตัวสุดท้ายออก
    print(postFix)
    print(stack)
INfixToPostfix()